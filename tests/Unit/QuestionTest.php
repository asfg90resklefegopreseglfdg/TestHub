<?php

namespace Tests\Unit;

use App\Question;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class QuestionTest extends TestCase
{

    private $question;
    private $questionWithSomeAnswers;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->question = factory(Question::class)->create([
            'question' => 'exampleQuestion',
            'points' => 5,
            'type_answer' => 'oneAnswer'
        ]);
        $this->questionWithSomeAnswers = factory(Question::class)->create([
            'question' => 'exampleQuestion',
            'points' => 5,
            'type_answer' => 'someAnswers'
        ]);
    }

    public function test_adding_answers()
    {
        $answers = [
            [
                'answer' => 'exampleAnswer',
                'correct' => true
            ],
            [
                'answer' => 'exampleAnswer2',
                'correct' => false
            ]
        ];
        $this->question->addAnswers($answers);

        $this->assertDatabaseHas('answers', [
            'answer' => 'exampleAnswer',
            'correct' => true,
        ]);
        $this->assertDatabaseHas('answers', [
            'answer' => 'exampleAnswer2',
            'correct' => false,
        ]);
    }

    public function test_adding_answer()
    {
        $answer = [
            'answer' => 'exampleAnswer',
            'correct' => true,
        ];
        $this->question->addAnswer($answer);

        $this->assertDatabaseHas('answers', [
            'answer' => 'exampleAnswer',
            'correct' => true,
        ]);
    }


    public function test_getting_attributes()
    {
        $this->assertEquals($this->question->id, $this->question->getId());
        $this->assertEquals(5, $this->question->getPoints());
        $this->assertEquals('oneAnswer', $this->question->getTypeAnswer());
    }


}
