<?php

namespace Tests\Unit;

use App\Test;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TestTest extends TestCase
{

    use RefreshDatabase;

    private $test;

    private $testWithAnonymousUser;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->test = factory(Test::class)->create([
            'name' => 'exampleName',
            'answers_public' => true,
            'passing_public' => true,
            'description' => 'exampleDescription',
            'duration' => 5,
            'slug' => 'exampleSlug'
        ]);
        $this->testWithAnonymousUser = factory(Test::class)->state('withAnonymousUser')->create([
            'link_to_stat_if_no_reg' => 'exampleLink'
        ]);
    }

    public function test_generation_test_end_time()
    {
        $this->assertEquals(date('Y-m-d H:i:s', strtotime('+5 minutes')), $this->test->generateTestEndTime());
    }

    public function test_adding_question()
    {
        $question = [
            'question' => 'exampleQuestionName',
            'points' => 10,
            'typeAnswer' => 'oneAnswer',
            'answers' => [
                [
                    'answer' => 'correctAnswer',
                    'correct' => true,
                ],
                [
                    'answer' => 'notCorrectAnswer',
                    'correct' => false,
                ]
            ]
        ];
        $this->test->addQuestion($question);

        $this->assertDatabaseHas('questions', [
            'question' => 'exampleQuestionName',
            'points' => 10,
            'type_answer' => 'oneAnswer',
        ]);
    }


    public function test_adding_tag_and_attach()
    {
        $tag = 'exampleTag';

        $tag = $this->test->addTag($tag);

        $this->assertDatabaseHas('tags', [ 'tag' => 'exampleTag']);
        $this->assertDatabaseHas('test_tags', [
            'tag_id' => $tag->getId(),
            'test_id' => $this->test->getId(),
        ]);
    }

    public function test_clear_and_setting_link_to_statistics()
    {

        $this->assertNull($this->testWithAnonymousUser->clearLinkToStatIfNoReg());

        $this->testWithAnonymousUser->setLinkToStatistics();

        $this->assertNotNull($this->testWithAnonymousUser->getLinkToStatIfNoReg());
    }

    public function test_exploding_tags()
    {
        $tags = 'example,example2';
        $separatedTags = $this->test->explodeTags($tags);
        $this->assertEquals(['example', 'example2'], $separatedTags);
    }

    public function test_getting_attributes()
    {
        $this->assertEquals('exampleSlug', $this->test->getSlug());
        $this->assertEquals(5, $this->test->getDuration());
        $this->assertEquals('exampleLink', $this->testWithAnonymousUser->getLinkToStatIfNoReg());
    }

}
