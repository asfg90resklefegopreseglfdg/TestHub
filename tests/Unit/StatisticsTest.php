<?php

namespace Tests\Unit;

use App\Question;
use App\Repositories\Eloquent\StatisticsRepository;
use App\Statistics;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class StatisticsTest extends TestCase
{
    public $statistics;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->statistics = factory(Statistics::class)->create([
            'points' => 20,
            'test_end_time' => date('Y-m-d H:i:s'),
            'test_complete' => true
        ]);
    }

    public function test_calculating_points()
    {
        $firstQuestion = factory(Question::class)->create([
            'question' => 'first question example',
            'points' => 5,
            'type_answer' => 'oneAnswer',
        ]);
        $firstQuestion->addAnswer([
            'answer' => 'exampleFirstAnswer',
            'correct' => true,
        ]);

        $secondQuestion = factory(Question::class)->create([
            'question' => 'second question example',
            'points' => 7,
            'type_answer' => 'someAnswers',

        ]);
        $secondQuestion->addAnswers([
                [
                    'answer' => 'example second answer one',
                    'correct' => true,
                ],
                [
                    'answer' => 'example second answer two',
                    'correct' => true,
                ]
        ]);

        $correctUserAnswers = [
            [
                'questionId' => $firstQuestion->getId(),
                'answer' => 'exampleFirstAnswer'
            ],

            [
                'questionId' => $secondQuestion->getId(),
                'answers' => ['example second answer one', 'example second answer two']
            ],
        ];

        $incorrectUserAnswers = [
            [
                'questionId' => $firstQuestion->getId(),
                'answer' => 'incorrect answer'
            ],

            [
                'questionId' => $secondQuestion->getId(),
                'answers' => ['incorrect answer', 'asd']
            ],
        ];

        $questions = collect([$firstQuestion, $secondQuestion]);

        $this->assertEquals(12, $this->statistics->calculatePoints($questions, $correctUserAnswers));
        $this->assertEquals(0, $this->statistics->calculatePoints($questions, $incorrectUserAnswers));
    }

    public function test_completing_statistic()
    {
        $statistic = factory(Statistics::class)->create([
            'points' => 20,
            'test_end_time' => date('Y-m-d H:i:s'),
            'test_complete' => false
        ]);

        $points = 20;
        $statistic->completeStatistic($points);
        $this->assertDatabaseHas('statistical_data', [
            'id' => $statistic->getId(),
            'points' => 20,
            'test_complete' => true
        ]);
    }

    public function test_checking_test_end_time()
    {
        $statisticBadTestEndTime = factory(Statistics::class)->create([
            'test_end_time' => date('Y-m-d H:i:s', 1),
        ]);
        $statisticWithGoodTestEndTime = factory(Statistics::class)->create([
            'test_end_time' => date('Y-m-d H:i:s', (strtotime('+1 week') + time())),
        ]);

        $this->assertFalse($statisticBadTestEndTime->checkTestEndTime());
        $this->assertTrue($statisticWithGoodTestEndTime->checkTestEndTime());
    }

    /**
     *
     * test with getting testEndTime can give an error/ try this test solo and if anyway error that problem/ 1 error second allowed
     *
     */
    public function test_getting_attributes()
    {
        $this->assertEquals('20', $this->statistics->getPoints());
        $this->assertEquals(date('Y-m-d H:i:s'), $this->statistics->getTestEndTime(), 'if gives an error/ try this test solo and if anyway error that problem');
        $this->assertEquals($this->statistics->id, $this->statistics->getId());
        $this->assertTrue($this->statistics->checkTestComplete());
    }


}
